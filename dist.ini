name    = Salsa_OAI
author  = Maurice Mengel <mauricemengel@gmail.com>
license = Perl_5
copyright_holder = Maurice Mengel
copyright_year   = 2011

;if tag already exists dzil release will fail; first rm tag:
;git tag -d v0.006
;git push origin :refs/tags/v0.006
version = 0.011 ; see CHANGES for RELEASE HISTORY

; RELEASE STRATEGY (derived from OllyG)
;I want to push to github, not yet to CPAN
; a) checkout devel and push to devel
; b) use 'dzil release' to push to master.
;I require from my developers that they use dzil, but not from my users
;who can simply install it from github with clone:


;more or less:
;http://search.cpan.org/~oliver/Dist-Zilla-PluginBundle-Author-OLIVER


[@Filter]
-bundle = @Basic
;better stupid readme than none at all
;-remove = Readme
-remove = UploadToCPAN
;why does this not work anymore?
;[ReadmeFromPod]
[ReadmeAnyFromPod]
type = text
location = build
;[ReadmeAnyFromPod]
;type = pod
;location = root

;I want manual versions
;[AutoVersion] ; automatically produces a version string
;[NextRelease]
[PkgVersion] ; writes version from dist.ini in all *.pm files
[CheckChangeLog] ; check wether CHANGES has entry for current version

;POD modifier
;[PodWeaver]
[PickyPodWeaver] ; changes only POD with ABSTRACT
;for list shortcut you need a weaver.ini

[AutoPrereqs] ; put Prereqs in Makefile.PL
[MetaJSON] ; write META.json
[InstallGuide] ; write an INSTALL file
[PruneFiles]
; eliminate from build dir
; with perl regex syntax!
filenames = dist.ini
filenames = access_log
filenames = config.yml
filenames = weaver.ini
filenames = o.xml
; not yet done:
filenames = bin/joinmpx.pl
filenames = bin/validateDb.pl

;whole directories
match     = ^bak/
match	  = ^data/
match     = ^logs/
match     = ^orga/
match     = ^xml/
;file types anywhere
match     = ~$
match     = ^#

[Git::CommitBuild]
;don't know what 'branch = ' does
branch =
;release to master!
release_branch = master
message = Build results of %h (on %b)

[@Git]
;commit_msg = Bumped changelog following rel. v%v

[MetaResourcesFromGit]

;tests
[Test::Version]
[CriticTests]
;[PodCoverageTests]
; use '=for Pod::Coverage sub_name' to exclude subs
;[PodSyntaxTests]
;[KwaliteeTests]
;[NoTabsTests]
[EOLTests]

;release
;we need the fake to trigger post-release actions
[FakeRelease]

;GitPush gets executed after release
[Git::Push]
; pushes current branch (which should be devel)
; push_to defaults to origin: push_to = origin
; repeatable


